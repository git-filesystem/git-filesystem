"use strict";(self.webpackChunk_git_filesystem_website=self.webpackChunk_git_filesystem_website||[]).push([[899],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var i=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=i.createContext({}),s=function(e){var t=i.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(r),u=n,f=d["".concat(p,".").concat(u)]||d[u]||m[u]||a;return r?i.createElement(f,l(l({ref:t},c),{},{components:r})):i.createElement(f,l({ref:t},c))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,l=new Array(a);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var s=2;s<a;s++)l[s]=r[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6188:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var i=r(7462),n=(r(7294),r(3905));const a={title:"CommitBuilder",sidebar_position:4},l=void 0,o={unversionedId:"typescript/usage/commitBuilder",id:"typescript/usage/commitBuilder",title:"CommitBuilder",description:"Use a CommitBuilder to apply multiple changes to different files using a single commit.",source:"@site/docs/typescript/usage/commitBuilder.mdx",sourceDirName:"typescript/usage",slug:"/typescript/usage/commitBuilder",permalink:"/git-filesystem/docs/typescript/usage/commitBuilder",draft:!1,editUrl:"https://github.com/git-filesystem/git-filesystem/tree/main/docs/typescript/usage/commitBuilder.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"CommitBuilder",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Repository",permalink:"/git-filesystem/docs/typescript/usage/repository"}},p={},s=[{value:"<code>createFile()</code>",id:"createfile",level:3},{value:"<code>updateFile()</code>",id:"updatefile",level:3},{value:"<code>readFile()</code>",id:"readfile",level:3},{value:"<code>deleteFile()</code>",id:"deletefile",level:3},{value:"<code>createCommit()</code>",id:"createcommit",level:3},{value:"JSON Helper Methods",id:"json-helper-methods",level:3}],c={toc:s};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,i.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Use a ",(0,n.kt)("inlineCode",{parentName:"p"},"CommitBuilder")," to apply multiple changes to different files using a single commit."),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"CommitBuilder")," exposes methods that are very similar to the ",(0,n.kt)("a",{parentName:"p",href:"./repository"},(0,n.kt)("inlineCode",{parentName:"a"},"Repository")),", with the main difference being that they're mostly synchronous."),(0,n.kt)("p",null,"A given file path can only have one type of action (create/update/delete) applied to it per ",(0,n.kt)("inlineCode",{parentName:"p"},"CommitBuilder"),"."),(0,n.kt)("h3",{id:"createfile"},(0,n.kt)("inlineCode",{parentName:"h3"},"createFile()")),(0,n.kt)("p",null,"Adds a pending creation of a file to be committed later."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"commitBuilder.createFile(path: string, content: string): void;\n")),(0,n.kt)("h3",{id:"updatefile"},(0,n.kt)("inlineCode",{parentName:"h3"},"updateFile()")),(0,n.kt)("p",null,"Adds a pending change to a file to be committed later."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"commitBuilder.updateFile(path: string, content: string): void;\n")),(0,n.kt)("h3",{id:"readfile"},(0,n.kt)("inlineCode",{parentName:"h3"},"readFile()")),(0,n.kt)("p",null,"Reads the content of a file."),(0,n.kt)("p",null,"If the file ",(0,n.kt)("strong",{parentName:"p"},"does")," a pending creation or update on the current ",(0,n.kt)("inlineCode",{parentName:"p"},"CommitBuilder")," then the file content will be read directly from the ",(0,n.kt)("inlineCode",{parentName:"p"},"CommitBuilder"),"."),(0,n.kt)("p",null,"If the file will ",(0,n.kt)("strong",{parentName:"p"},"not")," be created or updated using the current ",(0,n.kt)("inlineCode",{parentName:"p"},"CommitBuilder")," then the file content will be read from the remote repository."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"commitBuilder.readFile(path: string): Promise<string>;\ncommitBuilder.readFile(path: string, tagName: string): Promise<string>;\n")),(0,n.kt)("h3",{id:"deletefile"},(0,n.kt)("inlineCode",{parentName:"h3"},"deleteFile()")),(0,n.kt)("p",null,"Adds a pending deletion of a file to be committed later."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"commitBuilder.deleteFile(path: string): void;\n")),(0,n.kt)("h3",{id:"createcommit"},(0,n.kt)("inlineCode",{parentName:"h3"},"createCommit()")),(0,n.kt)("p",null,"Applies the configured changes in a single commit to the remote repository."),(0,n.kt)("p",null,"Once ",(0,n.kt)("inlineCode",{parentName:"p"},"createCommit")," has been called, the ",(0,n.kt)("inlineCode",{parentName:"p"},"CommitBuilder")," should not be used any further."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"commitBuilder.createCommit(commitMessage: string): Promise<string>;\n")),(0,n.kt)("h3",{id:"json-helper-methods"},"JSON Helper Methods"),(0,n.kt)("p",null,"Just like on the ",(0,n.kt)("a",{parentName:"p",href:"./repository"},(0,n.kt)("inlineCode",{parentName:"a"},"Repository")),", the create, read, and update methods also come with JSON helper-method equivalents:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'await commitBuilder.createJsonFile("path/to/file.json", anyObject);\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'const anyObject = await commitBuilder.readJsonFile<ObjectType>("path/to/file.json");\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'await commitBuilder.updateJsonFile("path/to/file.json", anyObject);\n')))}m.isMDXComponent=!0}}]);