"use strict";(self.webpackChunk_git_filesystem_website=self.webpackChunk_git_filesystem_website||[]).push([[548],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),f=r,y=m["".concat(l,".").concat(f)]||m[f]||u[f]||o;return n?i.createElement(y,a(a({ref:t},p),{},{components:n})):i.createElement(y,a({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4216:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const o={title:"Quick Usage",sidebar_position:3},a=void 0,s={unversionedId:"typescript/quick-usage",id:"typescript/quick-usage",title:"Quick Usage",description:"To get up and running quickly, look at the following examples.",source:"@site/docs/typescript/quick-usage.mdx",sourceDirName:"typescript",slug:"/typescript/quick-usage",permalink:"/git-filesystem/docs/typescript/quick-usage",draft:!1,editUrl:"https://github.com/git-filesystem/git-filesystem/tree/main/docs/typescript/quick-usage.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Quick Usage",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/git-filesystem/docs/typescript/installation"},next:{title:"How to use git-filesystem",permalink:"/git-filesystem/docs/typescript/usage/"}},l={},c=[{value:"Single Actions Per-Commit",id:"single-actions-per-commit",level:2},{value:"Multiple Actions Per-Commit",id:"multiple-actions-per-commit",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To get up and running quickly, look at the following examples."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"There are plenty of other methods exposed from the various classes that are not shown here.")),(0,r.kt)("h2",{id:"single-actions-per-commit"},"Single Actions Per-Commit"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { ClientFactory } from "git-filesystem";\n\nconst client = new ClientFactory().getClientForProvider(\n  "github", // Or "gitlab" or "bitbucket". This is the only time you need to know what provider you\'re dealing with\n  "username",\n  "access-token",\n  "user-agent-name"\n);\n\nconst repository = client.getRepository("repository-name");\n\nconst filePath = "file/path.txt";\n\nawait repository.createFile(filePath, "File content\\n"); // This creates a commit\n\nconst fileContent = await repository.readFile(filePath);\nconst updatedFileContent = (fileContent += "\\nNew data\\n");\n\nawait repository.updateFile(filePath, updatedFileContent); // This creates a commit\n\nawait repository.deleteFile(filePath); // This creates a commit\n')),(0,r.kt)("h2",{id:"multiple-actions-per-commit"},"Multiple Actions Per-Commit"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { ClientFactory } from "git-filesystem";\n\nconst client = new ClientFactory().getClientForProvider(\n  "github", // Or "gitlab" or "bitbucket". This is the only time you need to know what provider you\'re dealing with\n  "username",\n  "access-token",\n  "user-agent-name"\n);\n\nconst repository = client.getRepository("repository-name");\n\nconst commitBuilder = repository.createCommitBuilder();\n\ncommitBuilder.createFile("one.txt", "file content");\n\nlet fileContent = await commitBuilder.readFile("two.txt");\nfileContent += "\\n\\nNewData";\ncommitBuilder.updateFile("two.txt", fileContent);\n\ncommitBuilder.deleteFile("three.txt");\n\nawait commitBuilder.createCommit(); // This creates a commit that affects 3 different files\n')))}u.isMDXComponent=!0}}]);