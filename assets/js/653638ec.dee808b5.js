"use strict";(self.webpackChunk_git_filesystem_website=self.webpackChunk_git_filesystem_website||[]).push([[814],{5532:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var n=i(5893),o=i(1151);const r={title:"Quickstart",sidebar_position:3},s=void 0,a={id:"typescript/quickstart",title:"Quickstart",description:"To get up and running quickly, look at the following examples.",source:"@site/docs/typescript/quickstart.mdx",sourceDirName:"typescript",slug:"/typescript/quickstart",permalink:"/docs/typescript/quickstart",draft:!1,unlisted:!1,editUrl:"https://github.com/git-filesystem/git-filesystem/tree/main/docs/typescript/quickstart.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Quickstart",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/typescript/installation"},next:{title:"How to use git-filesystem",permalink:"/docs/typescript/usage/"}},c={},l=[{value:"Single Actions Per-Commit",id:"single-actions-per-commit",level:2},{value:"Multiple Actions Per-Commit",id:"multiple-actions-per-commit",level:2}];function m(t){const e={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:"To get up and running quickly, look at the following examples."}),"\n",(0,n.jsx)(e.admonition,{type:"info",children:(0,n.jsx)(e.p,{children:"There are plenty of other methods exposed from the various classes that are not shown here."})}),"\n",(0,n.jsx)(e.h2,{id:"single-actions-per-commit",children:"Single Actions Per-Commit"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:'import { ClientFactory } from "git-filesystem";\n\nconst client = new ClientFactory().getClientForProvider(\n  "github", // Or "gitlab" or "bitbucket". This is the only time you need to know what provider you\'re dealing with\n  "username",\n  "access-token",\n  "user-agent-name"\n);\n\nconst repository = client.getRepository("repository-name");\n\nconst filePath = "file/path.txt";\n\nawait repository.createFile(filePath, "File content\\n"); // This creates a commit\n\nconst fileContent = await repository.readFile(filePath);\nconst updatedFileContent = (fileContent += "\\nNew data\\n");\n\nawait repository.updateFile(filePath, updatedFileContent); // This creates a commit\n\nawait repository.deleteFile(filePath); // This creates a commit\n'})}),"\n",(0,n.jsx)(e.h2,{id:"multiple-actions-per-commit",children:"Multiple Actions Per-Commit"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:'import { ClientFactory } from "git-filesystem";\n\nconst client = new ClientFactory().getClientForProvider(\n  "github", // Or "gitlab" or "bitbucket". This is the only time you need to know what provider you\'re dealing with\n  "username",\n  "access-token",\n  "user-agent-name"\n);\n\nconst repository = client.getRepository("repository-name");\n\nconst commitBuilder = repository.createCommitBuilder();\n\ncommitBuilder.createFile("one.txt", "file content");\n\nlet fileContent = await commitBuilder.readFile("two.txt");\nfileContent += "\\n\\nNewData";\ncommitBuilder.updateFile("two.txt", fileContent);\n\ncommitBuilder.deleteFile("three.txt");\n\nawait commitBuilder.createCommit(); // This creates a commit that affects 3 different files\n'})})]})}function p(t={}){const{wrapper:e}={...(0,o.a)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(m,{...t})}):m(t)}},1151:(t,e,i)=>{i.d(e,{Z:()=>a,a:()=>s});var n=i(7294);const o={},r=n.createContext(o);function s(t){const e=n.useContext(r);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:s(t.components),n.createElement(r.Provider,{value:e},t.children)}}}]);