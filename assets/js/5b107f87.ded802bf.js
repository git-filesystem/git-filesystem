"use strict";(self.webpackChunk_git_filesystem_website=self.webpackChunk_git_filesystem_website||[]).push([[899],{4897:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var r=t(5893),n=t(1151);const l={title:"CommitBuilder",sidebar_position:4},s=void 0,d={id:"typescript/usage/commitBuilder",title:"CommitBuilder",description:"Use a CommitBuilder to apply multiple changes to different files using a single commit.",source:"@site/docs/typescript/usage/commitBuilder.mdx",sourceDirName:"typescript/usage",slug:"/typescript/usage/commitBuilder",permalink:"/docs/typescript/usage/commitBuilder",draft:!1,unlisted:!1,editUrl:"https://github.com/git-filesystem/git-filesystem/tree/main/docs/typescript/usage/commitBuilder.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"CommitBuilder",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Repository",permalink:"/docs/typescript/usage/repository"}},o={},c=[{value:"<code>createFile()</code>",id:"createfile",level:3},{value:"Throws:",id:"throws",level:4},{value:"<code>updateFile()</code>",id:"updatefile",level:3},{value:"Throws:",id:"throws-1",level:4},{value:"<code>readFile()</code>",id:"readfile",level:3},{value:"Throws:",id:"throws-2",level:4},{value:"<code>deleteFile()</code>",id:"deletefile",level:3},{value:"Throws:",id:"throws-3",level:4},{value:"<code>createCommit()</code>",id:"createcommit",level:3},{value:"Throws:",id:"throws-4",level:4},{value:"JSON Helper Methods",id:"json-helper-methods",level:3}];function a(e){const i={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.p,{children:["Use a ",(0,r.jsx)(i.code,{children:"CommitBuilder"})," to apply multiple changes to different files using a single commit."]}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"CommitBuilder"})," exposes methods that are very similar to the ",(0,r.jsx)(i.a,{href:"./repository",children:(0,r.jsx)(i.code,{children:"Repository"})}),", with the main difference being that they're mostly synchronous."]}),"\n",(0,r.jsxs)(i.p,{children:["A given file path can only have one type of action (create/update/delete) applied to it per ",(0,r.jsx)(i.code,{children:"CommitBuilder"}),"."]}),"\n",(0,r.jsx)(i.h3,{id:"createfile",children:(0,r.jsx)(i.code,{children:"createFile()"})}),"\n",(0,r.jsx)(i.p,{children:"Adds a pending creation of a file to be committed later."}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ts",children:"commitBuilder.createFile(path: string, content: string): void;\n"})}),"\n",(0,r.jsx)(i.admonition,{type:"caution",children:(0,r.jsx)(i.p,{children:"Due to API limitations, the GitHub implementation treats creating and updating a file as the same.\nCreating a file that already exists will overwrite it."})}),"\n",(0,r.jsx)(i.h4,{id:"throws",children:"Throws:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"AlreadyCommittedError"}),": If ",(0,r.jsx)(i.code,{children:"createCommit()"})," has already been called."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"MultipleFileActionsError"}),": If the given file path is already set to be created, updated, or deleted."]}),"\n"]}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)(i.admonition,{type:"tip",children:(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"updateFile"})," method requires you to pass in the whole file content, just like a traditional file-system API.\nYou cannot pass in a diff/patch/delta like you would with a Git API."]})}),"\n",(0,r.jsx)(i.admonition,{type:"caution",children:(0,r.jsx)(i.p,{children:"Due to API limitations, the GitHub implementation treats creating and updating a file as the same.\nUpdating a file that does not exist will create it."})}),"\n",(0,r.jsx)(i.h3,{id:"updatefile",children:(0,r.jsx)(i.code,{children:"updateFile()"})}),"\n",(0,r.jsx)(i.p,{children:"Adds a pending change to a file to be committed later."}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ts",children:"commitBuilder.updateFile(path: string, content: string): void;\n"})}),"\n",(0,r.jsx)(i.h4,{id:"throws-1",children:"Throws:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"AlreadyCommittedError"}),": If ",(0,r.jsx)(i.code,{children:"createCommit()"})," has already been called."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"MultipleFileActionsError"}),": If the given file path is already set to be created, updated, or deleted."]}),"\n"]}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)(i.h3,{id:"readfile",children:(0,r.jsx)(i.code,{children:"readFile()"})}),"\n",(0,r.jsx)(i.p,{children:"Reads the content of a file."}),"\n",(0,r.jsxs)(i.p,{children:["If the file ",(0,r.jsx)(i.strong,{children:"does"})," have a pending creation or update on the current ",(0,r.jsx)(i.code,{children:"CommitBuilder"})," then the file content will be read directly from the ",(0,r.jsx)(i.code,{children:"CommitBuilder"}),"."]}),"\n",(0,r.jsxs)(i.p,{children:["If the file will ",(0,r.jsx)(i.strong,{children:"not"})," be created or updated using the current ",(0,r.jsx)(i.code,{children:"CommitBuilder"})," then the file content will be read from the remote repository."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ts",children:"commitBuilder.readFile(path: string): Promise<string>;\ncommitBuilder.readFile(path: string, tagName: string): Promise<string>;\n"})}),"\n",(0,r.jsx)(i.h4,{id:"throws-2",children:"Throws:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"AlreadyCommittedError"}),": If ",(0,r.jsx)(i.code,{children:"createCommit()"})," has already been called."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"FileNotFoundError"}),": If the file does not exist."]}),"\n"]}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)(i.h3,{id:"deletefile",children:(0,r.jsx)(i.code,{children:"deleteFile()"})}),"\n",(0,r.jsx)(i.p,{children:"Adds a pending deletion of a file to be committed later."}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ts",children:"commitBuilder.deleteFile(path: string): void;\n"})}),"\n",(0,r.jsx)(i.h4,{id:"throws-3",children:"Throws:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"AlreadyCommittedError"}),": If ",(0,r.jsx)(i.code,{children:"createCommit()"})," has already been called."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"MultipleFileActionsError"}),": If the given file path is already set to be created, updated, or deleted."]}),"\n"]}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)(i.h3,{id:"createcommit",children:(0,r.jsx)(i.code,{children:"createCommit()"})}),"\n",(0,r.jsx)(i.p,{children:"Applies the configured changes in a single commit to the remote repository."}),"\n",(0,r.jsxs)(i.p,{children:["Once ",(0,r.jsx)(i.code,{children:"createCommit"})," has been called, the ",(0,r.jsx)(i.code,{children:"CommitBuilder"})," should not be used any further."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ts",children:"commitBuilder.createCommit(commitMessage: string): Promise<string>;\n"})}),"\n",(0,r.jsx)(i.h4,{id:"throws-4",children:"Throws:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"AlreadyCommittedError"}),": If ",(0,r.jsx)(i.code,{children:"createCommit()"})," has already been called."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"EmptyCommitError"}),": If you call ",(0,r.jsx)(i.code,{children:"createCommit()"})," without creating, updating, or deleting a file."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"CommitError"}),": If there's an unknown error while committing."]}),"\n"]}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)(i.h3,{id:"json-helper-methods",children:"JSON Helper Methods"}),"\n",(0,r.jsxs)(i.p,{children:["Just like on the ",(0,r.jsx)(i.a,{href:"./repository",children:(0,r.jsx)(i.code,{children:"Repository"})}),", the create, read, and update methods also come with JSON helper-method equivalents:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ts",children:'await commitBuilder.createJsonFile("path/to/file.json", anyObject);\n'})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ts",children:'const anyObject = await commitBuilder.readJsonFile<ObjectType>("path/to/file.json");\n'})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ts",children:'await commitBuilder.updateJsonFile("path/to/file.json", anyObject);\n'})})]})}function h(e={}){const{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},1151:(e,i,t)=>{t.d(i,{Z:()=>d,a:()=>s});var r=t(7294);const n={},l=r.createContext(n);function s(e){const i=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),r.createElement(l.Provider,{value:i},e.children)}}}]);