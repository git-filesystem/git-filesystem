"use strict";(self.webpackChunk_git_filesystem_website=self.webpackChunk_git_filesystem_website||[]).push([[899],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>u});var i=r(7294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,i,l=function(e,t){if(null==e)return{};var r,i,l={},n=Object.keys(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var d=i.createContext({}),p=function(e){var t=i.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},m=function(e){var t=p(e.components);return i.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var r=e.components,l=e.mdxType,n=e.originalType,d=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(r),u=l,h=c["".concat(d,".").concat(u)]||c[u]||s[u]||n;return r?i.createElement(h,a(a({ref:t},m),{},{components:r})):i.createElement(h,a({ref:t},m))}));function u(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var n=r.length,a=new Array(n);a[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:l,a[1]=o;for(var p=2;p<n;p++)a[p]=r[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,r)}c.displayName="MDXCreateElement"},6188:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>s,frontMatter:()=>n,metadata:()=>o,toc:()=>p});var i=r(7462),l=(r(7294),r(3905));const n={title:"CommitBuilder",sidebar_position:4},a=void 0,o={unversionedId:"typescript/usage/commitBuilder",id:"typescript/usage/commitBuilder",title:"CommitBuilder",description:"Use a CommitBuilder to apply multiple changes to different files using a single commit.",source:"@site/docs/typescript/usage/commitBuilder.mdx",sourceDirName:"typescript/usage",slug:"/typescript/usage/commitBuilder",permalink:"/docs/typescript/usage/commitBuilder",draft:!1,editUrl:"https://github.com/git-filesystem/git-filesystem/tree/main/docs/typescript/usage/commitBuilder.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"CommitBuilder",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Repository",permalink:"/docs/typescript/usage/repository"}},d={},p=[{value:"<code>createFile()</code>",id:"createfile",level:3},{value:"Throws:",id:"throws",level:4},{value:"<code>updateFile()</code>",id:"updatefile",level:3},{value:"Throws:",id:"throws-1",level:4},{value:"<code>readFile()</code>",id:"readfile",level:3},{value:"Throws:",id:"throws-2",level:4},{value:"<code>deleteFile()</code>",id:"deletefile",level:3},{value:"Throws:",id:"throws-3",level:4},{value:"<code>createCommit()</code>",id:"createcommit",level:3},{value:"Throws:",id:"throws-4",level:4},{value:"JSON Helper Methods",id:"json-helper-methods",level:3}],m={toc:p};function s(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,i.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Use a ",(0,l.kt)("inlineCode",{parentName:"p"},"CommitBuilder")," to apply multiple changes to different files using a single commit."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"CommitBuilder")," exposes methods that are very similar to the ",(0,l.kt)("a",{parentName:"p",href:"./repository"},(0,l.kt)("inlineCode",{parentName:"a"},"Repository")),", with the main difference being that they're mostly synchronous."),(0,l.kt)("p",null,"A given file path can only have one type of action (create/update/delete) applied to it per ",(0,l.kt)("inlineCode",{parentName:"p"},"CommitBuilder"),"."),(0,l.kt)("h3",{id:"createfile"},(0,l.kt)("inlineCode",{parentName:"h3"},"createFile()")),(0,l.kt)("p",null,"Adds a pending creation of a file to be committed later."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"commitBuilder.createFile(path: string, content: string): void;\n")),(0,l.kt)("h4",{id:"throws"},"Throws:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AlreadyCommittedError"),": If ",(0,l.kt)("inlineCode",{parentName:"li"},"createCommit()")," has already been called."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"MultipleFileActionsError"),": If the given file path is already set to be created, updated, or deleted.")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"updatefile"},(0,l.kt)("inlineCode",{parentName:"h3"},"updateFile()")),(0,l.kt)("p",null,"Adds a pending change to a file to be committed later."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"commitBuilder.updateFile(path: string, content: string): void;\n")),(0,l.kt)("h4",{id:"throws-1"},"Throws:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AlreadyCommittedError"),": If ",(0,l.kt)("inlineCode",{parentName:"li"},"createCommit()")," has already been called."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"MultipleFileActionsError"),": If the given file path is already set to be created, updated, or deleted.")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"readfile"},(0,l.kt)("inlineCode",{parentName:"h3"},"readFile()")),(0,l.kt)("p",null,"Reads the content of a file."),(0,l.kt)("p",null,"If the file ",(0,l.kt)("strong",{parentName:"p"},"does")," a pending creation or update on the current ",(0,l.kt)("inlineCode",{parentName:"p"},"CommitBuilder")," then the file content will be read directly from the ",(0,l.kt)("inlineCode",{parentName:"p"},"CommitBuilder"),"."),(0,l.kt)("p",null,"If the file will ",(0,l.kt)("strong",{parentName:"p"},"not")," be created or updated using the current ",(0,l.kt)("inlineCode",{parentName:"p"},"CommitBuilder")," then the file content will be read from the remote repository."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"commitBuilder.readFile(path: string): Promise<string>;\ncommitBuilder.readFile(path: string, tagName: string): Promise<string>;\n")),(0,l.kt)("h4",{id:"throws-2"},"Throws:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AlreadyCommittedError"),": If ",(0,l.kt)("inlineCode",{parentName:"li"},"createCommit()")," has already been called."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"FileNotFoundError"),": If the file does not exist.")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"deletefile"},(0,l.kt)("inlineCode",{parentName:"h3"},"deleteFile()")),(0,l.kt)("p",null,"Adds a pending deletion of a file to be committed later."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"commitBuilder.deleteFile(path: string): void;\n")),(0,l.kt)("h4",{id:"throws-3"},"Throws:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AlreadyCommittedError"),": If ",(0,l.kt)("inlineCode",{parentName:"li"},"createCommit()")," has already been called."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"MultipleFileActionsError"),": If the given file path is already set to be created, updated, or deleted.")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"createcommit"},(0,l.kt)("inlineCode",{parentName:"h3"},"createCommit()")),(0,l.kt)("p",null,"Applies the configured changes in a single commit to the remote repository."),(0,l.kt)("p",null,"Once ",(0,l.kt)("inlineCode",{parentName:"p"},"createCommit")," has been called, the ",(0,l.kt)("inlineCode",{parentName:"p"},"CommitBuilder")," should not be used any further."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"commitBuilder.createCommit(commitMessage: string): Promise<string>;\n")),(0,l.kt)("h4",{id:"throws-4"},"Throws:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AlreadyCommittedError"),": If ",(0,l.kt)("inlineCode",{parentName:"li"},"createCommit()")," has already been called."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"EmptyCommitError"),": If you call ",(0,l.kt)("inlineCode",{parentName:"li"},"createCommit()")," without creating, updating, or deleting a file."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"CommitError"),": If there's an unknown error while committing.")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"json-helper-methods"},"JSON Helper Methods"),(0,l.kt)("p",null,"Just like on the ",(0,l.kt)("a",{parentName:"p",href:"./repository"},(0,l.kt)("inlineCode",{parentName:"a"},"Repository")),", the create, read, and update methods also come with JSON helper-method equivalents:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'await commitBuilder.createJsonFile("path/to/file.json", anyObject);\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const anyObject = await commitBuilder.readJsonFile<ObjectType>("path/to/file.json");\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'await commitBuilder.updateJsonFile("path/to/file.json", anyObject);\n')))}s.isMDXComponent=!0}}]);