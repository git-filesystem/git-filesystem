"use strict";(self.webpackChunk_git_filesystem_website=self.webpackChunk_git_filesystem_website||[]).push([[927],{241:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var n=i(5893),r=i(1151);const s={title:"Repository",sidebar_position:3},o=void 0,l={id:"typescript/usage/repository",title:"Repository",description:"Files",source:"@site/docs/typescript/usage/repository.mdx",sourceDirName:"typescript/usage",slug:"/typescript/usage/repository",permalink:"/docs/typescript/usage/repository",draft:!1,unlisted:!1,editUrl:"https://github.com/git-filesystem/git-filesystem/tree/main/docs/typescript/usage/repository.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Repository",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Client",permalink:"/docs/typescript/usage/client"},next:{title:"CommitBuilder",permalink:"/docs/typescript/usage/commitBuilder"}},a={},d=[{value:"Files",id:"files",level:2},{value:"<code>createFile()</code>",id:"createfile",level:3},{value:"Throws:",id:"throws",level:4},{value:"<code>readFile()</code>",id:"readfile",level:3},{value:"Throws:",id:"throws-1",level:4},{value:"<code>updateFile()</code>",id:"updatefile",level:3},{value:"Throws:",id:"throws-2",level:4},{value:"<code>deleteFile()</code>",id:"deletefile",level:3},{value:"Throws:",id:"throws-3",level:4},{value:"JSON Helper Methods",id:"json-helper-methods",level:3},{value:"Tags",id:"tags",level:2},{value:"<code>createCommitBuilder()</code>",id:"createcommitbuilder",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"files",children:"Files"}),"\n",(0,n.jsxs)(t.p,{children:["When you have a repository from a ",(0,n.jsx)(t.a,{href:"./client",children:"client"}),", you can read and write to the files within it.\nThe available methods include:"]}),"\n",(0,n.jsx)(t.h3,{id:"createfile",children:(0,n.jsx)(t.code,{children:"createFile()"})}),"\n",(0,n.jsx)(t.p,{children:"Creates a new commit that creates a new file in the repository."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'await repository.createFile("path/to/file.txt", "file content");\n'})}),"\n",(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsx)(t.p,{children:"Due to API limitations, the GitHub implementation treats creating and updating a file as the same.\nCreating a file that already exists will overwrite it."})}),"\n",(0,n.jsx)(t.h4,{id:"throws",children:"Throws:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"CommitError"}),": If there's an unknown error while committing."]}),"\n"]}),"\n",(0,n.jsx)("hr",{}),"\n",(0,n.jsx)(t.h3,{id:"readfile",children:(0,n.jsx)(t.code,{children:"readFile()"})}),"\n",(0,n.jsx)(t.p,{children:"Reads a files content from the remote repository."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'const fileContent = await repository.readFile("path/to/file.txt");\n'})}),"\n",(0,n.jsx)(t.h4,{id:"throws-1",children:"Throws:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"FileNotFoundError"}),": If the file does not exist."]}),"\n"]}),"\n",(0,n.jsx)("hr",{}),"\n",(0,n.jsx)(t.h3,{id:"updatefile",children:(0,n.jsx)(t.code,{children:"updateFile()"})}),"\n",(0,n.jsx)(t.p,{children:"Creates a new commit that replaces the content of a file in the repository."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'await repository.updateFile("path/to/file.txt", "file content");\n'})}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"updateFile"})," method requires you to pass in the whole file content, just like a traditional file-system API.\nYou cannot pass in a diff/patch/delta like you would with a Git API."]})}),"\n",(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsx)(t.p,{children:"Due to API limitations, the GitHub implementation treats creating and updating a file as the same.\nUpdating a file that does not exist will create it."})}),"\n",(0,n.jsx)(t.h4,{id:"throws-2",children:"Throws:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"CommitError"}),": If there's an unknown error while committing."]}),"\n"]}),"\n",(0,n.jsx)("hr",{}),"\n",(0,n.jsx)(t.h3,{id:"deletefile",children:(0,n.jsx)(t.code,{children:"deleteFile()"})}),"\n",(0,n.jsx)(t.p,{children:"Creates a new commit that deletes a file from the repository."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'await repository.deleteFile("path/to/file.txt");\n'})}),"\n",(0,n.jsx)(t.h4,{id:"throws-3",children:"Throws:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"CommitError"}),": If there's an unknown error while committing."]}),"\n"]}),"\n",(0,n.jsx)("hr",{}),"\n",(0,n.jsx)(t.h3,{id:"json-helper-methods",children:"JSON Helper Methods"}),"\n",(0,n.jsx)(t.p,{children:"The create, read, and update methods also come with JSON helper-method equivalents:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'await repository.createJsonFile("path/to/file.json", anyObject);\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'const anyObject = await repository.readJsonFile<ObjectType>("path/to/file.json");\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'await repository.updateJsonFile("path/to/file.json", anyObject);\n'})}),"\n",(0,n.jsx)("hr",{}),"\n",(0,n.jsx)(t.h2,{id:"tags",children:"Tags"}),"\n",(0,n.jsxs)(t.p,{children:["The repository class also exposes methods for handling tags.\nYou can create tags at the current ",(0,n.jsx)(t.code,{children:"HEAD"})," of the repository's branch and then read files back from that tag at a later point in time."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'await repository.createFile("path/to/file.txt", "original content");\n\nawait repository.createTag("myTag");\n\nawait repository.updateFile("path/to/file.txt", "new content");\n\nawait repository.readFile("path/to/file.txt"); // returns "new content"\nawait repository.readFile("path/to/file.txt", "myTag"); // returns "original content"\n'})}),"\n",(0,n.jsx)("hr",{}),"\n",(0,n.jsx)(t.h2,{id:"createcommitbuilder",children:(0,n.jsx)(t.code,{children:"createCommitBuilder()"})}),"\n",(0,n.jsxs)(t.p,{children:["Sometimes you might want to apply changes to multiple files using a single commit.\nTo achive this, call the ",(0,n.jsx)(t.code,{children:"createCommitBuilder()"})," method to get a new ",(0,n.jsx)(t.a,{href:"./commitBuilder",children:(0,n.jsx)(t.code,{children:"CommitBuilder"})}),".\nSee the ",(0,n.jsx)(t.a,{href:"./commitBuilder",children:(0,n.jsx)(t.code,{children:"CommitBuilder"})})," page for details on how to use it."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"const commitBuilder = repository.createCommitBuilder();\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,t,i)=>{i.d(t,{Z:()=>l,a:()=>o});var n=i(7294);const r={},s=n.createContext(r);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);