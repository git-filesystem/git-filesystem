"use strict";(self.webpackChunk_git_filesystem_website=self.webpackChunk_git_filesystem_website||[]).push([[814],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},621:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={title:"Quickstart",sidebar_position:3},a=void 0,l={unversionedId:"typescript/quickstart",id:"typescript/quickstart",title:"Quickstart",description:"To get up and running quickly, look at the following examples.",source:"@site/docs/typescript/quickstart.mdx",sourceDirName:"typescript",slug:"/typescript/quickstart",permalink:"/docs/typescript/quickstart",draft:!1,editUrl:"https://github.com/git-filesystem/git-filesystem/tree/main/docs/typescript/quickstart.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Quickstart",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/typescript/installation"},next:{title:"How to use git-filesystem",permalink:"/docs/typescript/usage/"}},s={},c=[{value:"Single Actions Per-Commit",id:"single-actions-per-commit",level:2},{value:"Multiple Actions Per-Commit",id:"multiple-actions-per-commit",level:2}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"To get up and running quickly, look at the following examples."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"There are plenty of other methods exposed from the various classes that are not shown here.")),(0,i.kt)("h2",{id:"single-actions-per-commit"},"Single Actions Per-Commit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { ClientFactory } from "git-filesystem";\n\nconst client = new ClientFactory().getClientForProvider(\n  "github", // Or "gitlab" or "bitbucket". This is the only time you need to know what provider you\'re dealing with\n  "username",\n  "access-token",\n  "user-agent-name"\n);\n\nconst repository = client.getRepository("repository-name");\n\nconst filePath = "file/path.txt";\n\nawait repository.createFile(filePath, "File content\\n"); // This creates a commit\n\nconst fileContent = await repository.readFile(filePath);\nconst updatedFileContent = (fileContent += "\\nNew data\\n");\n\nawait repository.updateFile(filePath, updatedFileContent); // This creates a commit\n\nawait repository.deleteFile(filePath); // This creates a commit\n')),(0,i.kt)("h2",{id:"multiple-actions-per-commit"},"Multiple Actions Per-Commit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { ClientFactory } from "git-filesystem";\n\nconst client = new ClientFactory().getClientForProvider(\n  "github", // Or "gitlab" or "bitbucket". This is the only time you need to know what provider you\'re dealing with\n  "username",\n  "access-token",\n  "user-agent-name"\n);\n\nconst repository = client.getRepository("repository-name");\n\nconst commitBuilder = repository.createCommitBuilder();\n\ncommitBuilder.createFile("one.txt", "file content");\n\nlet fileContent = await commitBuilder.readFile("two.txt");\nfileContent += "\\n\\nNewData";\ncommitBuilder.updateFile("two.txt", fileContent);\n\ncommitBuilder.deleteFile("three.txt");\n\nawait commitBuilder.createCommit(); // This creates a commit that affects 3 different files\n')))}m.isMDXComponent=!0}}]);