"use strict";(self.webpackChunk_git_filesystem_website=self.webpackChunk_git_filesystem_website||[]).push([[646],{856:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=n(5893),r=n(1151);const o={title:"Client Factory",sidebar_position:1},s=void 0,a={id:"typescript/usage/client-factory",title:"Client Factory",description:"The primary entrypoint into the main library is via the ClientFactory class.",source:"@site/docs/typescript/usage/client-factory.mdx",sourceDirName:"typescript/usage",slug:"/typescript/usage/client-factory",permalink:"/docs/typescript/usage/client-factory",draft:!1,unlisted:!1,editUrl:"https://github.com/git-filesystem/git-filesystem/tree/main/docs/typescript/usage/client-factory.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Client Factory",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"How to use git-filesystem",permalink:"/docs/typescript/usage/"},next:{title:"Client",permalink:"/docs/typescript/usage/client"}},c={},l=[{value:"<code>getClientForProvider()</code>",id:"getclientforprovider",level:3},{value:"Author / Commiter",id:"author--commiter",level:4},{value:"Json Configuration",id:"json-configuration",level:4}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["The primary entrypoint into the main library is via the ",(0,i.jsx)(t.code,{children:"ClientFactory"})," class."]}),"\n",(0,i.jsx)(t.h3,{id:"getclientforprovider",children:(0,i.jsx)(t.code,{children:"getClientForProvider()"})}),"\n",(0,i.jsxs)(t.p,{children:["After importing ",(0,i.jsx)(t.code,{children:"ClientFactory"}),", new one up and then call the ",(0,i.jsx)(t.code,{children:"getClientForProvider"})," method."]}),"\n",(0,i.jsx)(t.p,{children:"This is the only time you need to know which provider you're handling, from this point onwards the APIs are all the same."}),"\n",(0,i.jsx)(t.p,{children:"The four things you need to pass in are:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The provider of choice (",(0,i.jsx)(t.code,{children:"github"}),", ",(0,i.jsx)(t.code,{children:"gitlab"}),", or ",(0,i.jsx)(t.code,{children:"bitbucket"}),")"]}),"\n",(0,i.jsx)(t.li,{children:"A username"}),"\n",(0,i.jsx)(t.li,{children:"A personal access token (PAT) / API key"}),"\n",(0,i.jsx)(t.li,{children:"A user-agent name"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The user agent name should represent your product/service."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'import { ClientFactory } from "git-filesystem";\n\nconst client = new ClientFactory().getClientForProvider(\n  "github",\n  "username",\n  "access-token",\n  "user-agent-name"\n);\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"getClientForProvider"})," method can also take other optional parameters."]}),"\n",(0,i.jsx)(t.h4,{id:"author--commiter",children:"Author / Commiter"}),"\n",(0,i.jsxs)(t.p,{children:["The first two optional parameters are ",(0,i.jsx)(t.code,{children:"authorDetails"})," and ",(0,i.jsx)(t.code,{children:"committerDetails"})," respectively.\nThese are both git terminology, and relate to the person(s) that the library is making commits on behalf of."]}),"\n",(0,i.jsx)(t.p,{children:"Both use the following TypeScript interface:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"interface GitUser {\n  name: string;\n  email: string;\n}\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History#:~:text=You%20may%20be%20wondering%20what%20the%20difference%20is%20between%20author%20and%20committer.%20The%20author%20is%20the%20person%20who%20originally%20wrote%20the%20work%2C%20whereas%20the%20committer%20is%20the%20person%20who%20last%20applied%20the%20work.",children:"See the git website for the difference between the two options"}),",\nthough you'll usually want to pass in the same details for both."]})}),"\n",(0,i.jsx)(t.h4,{id:"json-configuration",children:"Json Configuration"}),"\n",(0,i.jsx)(t.p,{children:"The final optional argument is a set of JSON configuration options."}),"\n",(0,i.jsx)(t.p,{children:"The TypeScript/JavaScript libraries contain some helper methods to read/write objects to files as JSON.\nBy default these methods will use pretty-printed JSON using 2 spaces, but you can use this option to change that."}),"\n",(0,i.jsxs)(t.p,{children:["There are two possible types you can use for this JSON configuration (other than ",(0,i.jsx)(t.code,{children:"null"}),"):"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'type FormatJsonConfig = {\n  prettyFormat: true;\n  indentChar: " " | "\\t";\n  indentSize: number; // How many of the `indentChar` to use\n};\n'})}),"\n",(0,i.jsx)(t.p,{children:"or"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"type NoFormatJsonConfig = {\n  prettyFormat: false;\n};\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The return type of the ",(0,i.jsx)(t.code,{children:"getClientForProvider"})," method is an instance of the ",(0,i.jsx)(t.a,{href:"./client",children:(0,i.jsx)(t.code,{children:"Client"})})," class."]})]})}function d(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>s});var i=n(7294);const r={},o=i.createContext(r);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);